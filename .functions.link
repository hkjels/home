#!/usr/bin/env bash


# Find file by name

function f() {
  find . -iname "$1" -print
}


# Open file/directory

function o() {
  if [[ -n $1 ]]; then open $1
  else open .
  fi
}


# Make directory and `cd` into it

function mcd() {
  mkdir -p "$1" && cd "$1"
}


# Output colors and their numeric value

function colors() {
  for code in {0..255}; do
    printf "\e[38;05;${code}m $code";
    (( code % 15 == 0 )) && echo "";
  done
}


# Helper to extract different archives
# Stolen from zshuery

function ex() {
  if [[ -f $1 ]]; then
    case $1 in
      *.tar.bz2) tar xvjf $1;;
      *.tar.gz) tar xvzf $1;;
      *.tar.xz) tar xvJf $1;;
      *.tar.lzma) tar --lzma xvf $1;;
      *.bz2) bunzip $1;;
      *.rar) unrar $1;;
      *.gz) gunzip $1;;
      *.tar) tar xvf $1;;
      *.tbz2) tar xvjf $1;;
      *.tgz) tar xvzf $1;;
      *.zip) unzip $1;;
      *.Z) uncompress $1;;
      *.7z) 7z x $1;;
      *.dmg) hdiutul mount $1;; # mount OS X disk images
      *) echo "'$1' cannot be extracted via >ex<";;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


# Retrieve public IP-address

function myip() {
  wget http://ipecho.net/plain -O - -q ; echo
}


# Jump directly to the root of a git-project with `cd ^`

function cd {
  case $1 in
    ^ )
      builtin cd $(git root) ;;
    * )
      builtin cd "$@" ;;
  esac
}


# Zshell vi-bindings

function zshBindings() {

  # Vim-styled input

  bindkey -v


  # Search backwards and forwards with a pattern

  bindkey -M vicmd '/' history-incremental-pattern-search-backward
  bindkey -M vicmd '?' history-incremental-pattern-search-forward
  bindkey -M viins '^R' history-incremental-pattern-search-backward
  bindkey -M viins '^F' history-incremental-pattern-search-forward


  # Add some convenient emacs-like shortcuts back

  bindkey "" beginning-of-line
  bindkey "" end-of-line
  bindkey "" backward-char
  bindkey "" forward-char
  bindkey "" backward-word
  bindkey "" forward-word
  bindkey "" kill-line

}


# Bash vi-bindings

function bashBindings() {
  set -o vi
}


# Start process in the background and hide `std(out|err)`

function hide() {
  local proc=$@
  eval "$proc &> /dev/null &"
}


# Colored manpages

function man() {
  env \
    LESS_TERMCAP_mb=$(printf "${RED}") \
    LESS_TERMCAP_md=$(printf "${BLUE}") \
    LESS_TERMCAP_me=$(printf "${RESET}") \
    LESS_TERMCAP_se=$(printf "${RESET}") \
    LESS_TERMCAP_so=$(printf "${CYAN}") \
    LESS_TERMCAP_ue=$(printf "${RESET}") \
    LESS_TERMCAP_us=$(printf "${YELLOW}") \
      man "$@"
}


# Version-control status

function customvcprompt() {
  if [[ -n "$(vcprompt)" ]]; then
    [[ -n "$(vcprompt -f '%m')" ]] &&
      printf "${RED}$(vcprompt -f '(%b) %m ')" ||
      printf "${MAGENTA}$(vcprompt -f '(%b) ')"
    printf "${RESET}"
  fi
}


# NuGet CLI

function nuget() {
  mono --runtime=v4.0 $HOME/bin/nuget.exe $*
}

