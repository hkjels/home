"
" .vimrc
" ======
"
" __My personal preferences for vim, gvim and mvim.
"
" ### Worth noting
"
" * Uses Neobundle to manage packages
" * Relative line-numbers when not in insert-mode
" * Sane version of search/replace
" * Arrow-keys are remapped to switch between tabs or to move 
"   between conflicts in diff-mode
" * Leader is mapped to space
"
" Author: Henrik Kjelsberg <hkjels@me.com> (http://take.no/)
" Version: 0.0.1
"


" NeoBundle ------------------------------------------------------------ {{{
" @see https://github.com/Shougo/neobundle.vim

  set nocompatible                              " Improved!
  filetype off                                  " Necessary to make NeoBundle happy
  if has('vim_starting')
    set rtp+=~/.vim/bundle/neobundle.vim/       " Path to bundles
  endif
  call neobundle#rc(expand('~/.vim/bundle/'))   " Let Vundle to it's magic

  NeoBundleFetch 'Shougo/neobundle.vim'

" }}}


" System --------------------------------------------------------------- {{{

  NeoBundle 'Shougo/vimproc.vim', {
    \ 'build' : {
    \     'mac' : 'make -f make_mac.mak',
    \     'unix' : 'make -f make_unix.mak',
    \    },
    \ }
  NeoBundle 'mhinz/vim-startify'
  NeoBundle 'sjl/gundo.vim'
  NeoBundle 'Shougo/unite.vim'
  NeoBundle 'h1mesuke/unite-outline'
  NeoBundle 'osyo-manga/unite-quickfix'
  NeoBundle 'thinca/vim-unite-history'
  NeoBundle 'jeffkreeftmeijer/vim-numbertoggle'

  filetype plugin indent on
  set shell=bash\ --login             " Bring on a familiar environment
  set exrc                            " Source .exrc files automatically
  set nobk nowb                       " Turn off backup
  set ttyfast                         " Faster repeated editing
  set mouse=a                         " Enable mouse-input
  set hidden                          " Allow un-saved buffers in background
  set backspace=indent,eol,start      " Make backspace behave normally.
  set directory=~/.vim/swap           " Swap files
  set ffs=unix,dos,mac                " Default file types
  set history=1000                    " Remember more commands and search history
  set undolevels=1000                 " Use many muchos levels of undo
  set modelines=0                     " Prevents modeline exploits
  set autowriteall                    " Save when shifting focus
  set autoread                        " Reload files changed outside of vim
  set title                           " Change the terminal's title
  set visualbell                      " No bells!
  set noerrorbells                    " No whistles!
  set ttimeout                        " Use timeout for combined key-mappings
  set ttimeoutlen=50                  " Time you have to complete a mapped key sequence

  " Share system clipboard
  if $TMUX == ''
    set clipboard+=unnamed
  endif

  " Unite
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
  let g:unite_enable_start_insert = 1
  let g:unite_source_file_mru_limit = 200
  let s:unite_affects = 'file,file/new,buffer,file_rec,file_rec/async'
  let s:unite_ignore = '/\(pear\|thrift\|gen\|.git\|.DS_Store\|components\|node_modules\|.jpg\|.png\)/'
  call unite#custom#source(s:unite_affects, 'ignore_pattern', s:unite_ignore)

  " Silver-searcher
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
  " Ack-grep
  elseif executable('ack')
    let g:unite_source_grep_command = 'ack'
  endif
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column --smart-case --ignore pear'
  let g:unite_source_grep_recursive_opt = ''

  " Pager
  let vimpager_disable_x11 = 1

" }}}


" Debugging ------------------------------------------------------------ {{{

  " Bundle 'dkasak/manpageview'
  " Bundle 'joonty/vdebug'
  " Bundle 'Superior-Haskell-Interaction-Mode-SHIM'

" }}}


" Git ------------------------------------------------------------------ {{{

  NeoBundle 'airblade/vim-gitgutter'
  NeoBundle 'gregsexton/gitv'
  NeoBundle 'kablamo/vim-git-log'
  NeoBundle 'mattn/gist-vim'
  NeoBundle 'tpope/vim-fugitive'

  " Gist
  let g:gist_clip_command = 'pbcopy'
  let g:gist_detect_filetype = 2
  let g:gist_show_privates = 1

  " Gitv
  let g:Gitv_TruncateCommitSubjects = 1

  " Source .exrc
  au BufRead * call s:SourceExrc()
  fun! s:SourceExrc()
    let root = system('git root')
    let exrc = root . '/.exrc'
    if filereadable(exrc)
      so exrc
    endif
  endfun

" }}}


" Navigation ----------------------------------------------------------- {{{

  NeoBundle 'hkjels/z.vim'
  NeoBundle 'Lokaltog/vim-easymotion'
  NeoBundle 'Shougo/vimfiler.vim', { 'depends' : 'Shougo/unite.vim' }

  " Vimfiler
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_ignore_pattern = '^\%(.git\|.DS_Store\)$'
  let g:vimfiler_execute_file_list = {}
  if has('mac')
    let g:vimfiler_quick_look_command = 'qlmanage -p'
  endif

" }}}


" Completion ----------------------------------------------------------- {{{

  NeoBundle 'Shougo/neocomplete', {'depends' :
    \ [ 'Shougo/neosnippet.git',
    \ ['rstacruz/sparkup', {'rtp': 'vim'}],
    \ 'honza/vim-snippets',
    \ ]}
  NeoBundle 'eagletmt/ghcmod-vim'
  NeoBundle 'ujihisa/neco-ghc'

  if neobundle#is_sourced('neocomplete')
    let g:acp_enableAtStartup = 0
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1

    " Plugin key-mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " <TAB>: completion.
    " inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

    " SuperTab like snippets behavior.
    imap <silent><expr><TAB> neosnippet#expandable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
      \ "\<C-e>" : "\<TAB>")
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  endif

  if has("wildmenu")
    set wildmenu                                      " Completions in a menu
    set wildmode=list:longest,full                    " Fine grained completion
    set wildignore+=.hg,.git,.svn                     " Version control
    set wildignore+=gen                               " Generated files
    set wildignore+=*.aux,*.out,*.toc                 " LaTeX intermediate files
    set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg    " Binary images
    set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest  " Compiled object files
    set wildignore+=*.sw?                             " Vim swap files
    set wildignore+=*.DS_Store                        " MacOs meta-file
    set wildignore+=*.luac                            " Lua byte code
    set wildignore+=*.pyc                             " Python byte code
    set wildignore+=**.class                          " Cursed Java class files
    set wildignore+=node_modules                      " Node project-dependencies

    " Case-insensitive completion
    if exists("&wildignorecase")
        set wildignorecase
    endif
  endif

" }}}


" Aesthetics ----------------------------------------------------------- {{{

  NeoBundle 'hkjels/focus.vim'
  NeoBundle 'hkjels/status.vim'

  syntax enable                       " Enable syntax highlighting
  set background=dark                 " Use dark-theme
  colorscheme focus                   " Color-scheme to use

  set list listchars=tab:→\ ,trail:·  " Show 'invisible characters'
  set hlsearch                        " Highlight search terms
  set number                          " Show line-numbers
  set colorcolumn=76                  " Practice short code
  set nowrap                          " Don't wrap lines
  set showmatch                       " Show matching parenthesis
  set guicursor+=a:blinkon0           " Disable the blinking cursor
  set scrolloff=10                    " Keep the cursor close to center
  set sidescrolloff=10                " and middle

  " Hide toolbar when using graphical vim
  if has('gui_running')
    set guioptions=-t
  endif

  " Highlight VCS conflicts
  match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" }}}


" Search --------------------------------------------------------------- {{{

  set gdefault              " Search with global by default
  set ignorecase            " Ignore case
  set smartcase             " Ignore case if pattern is lowercase
  set incsearch             " Show search matches as you type

" }}}


" Editing -------------------------------------------------------------- {{{

  NeoBundle 'Raimondi/delimitMate'
  NeoBundle 'hlissner/vim-multiedit'
  NeoBundle 'scrooloose/syntastic'
  NeoBundle 'tomtom/tcomment_vim'
  NeoBundle 'tpope/vim-endwise'
  NeoBundle 'tpope/vim-ragtag'
  NeoBundle 'tpope/vim-speeddating'
  NeoBundle 'tpope/vim-surround'
  NeoBundle 'tpope/vim-unimpaired'
  NeoBundle 'tsaleh/vim-align'

  set spell                       " Use spell-checker
  set encoding=utf-8              " Default encoding
  set ts=2 sw=2 sts=2 et sta      " Use two-space indentation by default
  set shiftround                  " Round indent to multiple of shiftwidth
  set cindent                     " C indentation rules"
  set autoindent                  " Indent based on ruleset of language
  set smartindent                 " Indent first line according to previous
  set smarttab                    " Use shiftwidth to emulate tabs

  " Syntastic
  set laststatus=2
  let g:syntastic_enable_signs=1
  let g:syntastic_auto_jump=0

" }}}


" Tags ----------------------------------------------------------------- {{{

  set tags=.git/tags             " Store tags with each project

" }}}


" Window management ---------------------------------------------------- {{{

  set splitbelow
  set splitright

" }}}


" Folds ---------------------------------------------------------------- {{{

  set foldmethod=indent
  set foldnestmax=3
  set nofoldenable

" }}}


" Languages ------------------------------------------------------------ {{{

  NeoBundleLazy 'vim-ruby/vim-ruby', { 'autoload': { 'filetypes': ['rb'] } }
  NeoBundleLazy 'chrisbra/csv.vim', { 'autoload': { 'filetypes': ['csv'] } }
  NeoBundleLazy 'digitaltoad/vim-jade', { 'autoload': { 'filetypes': ['csv'] } }
  NeoBundleLazy 'jcf/vim-latex', { 'autoload': { 'filetypes': ['tex'] } }
  NeoBundleLazy 'guileen/vim-node', { 'autoload': { 'filetypes': ['js'] } }
  NeoBundleLazy 'jelera/vim-javascript-syntax', { 'autoload': { 'filetypes': ['js'] } }
  NeoBundleLazy 'kchmck/vim-coffee-script', { 'autoload': { 'filetypes': ['coffee'] } }
  NeoBundleLazy 'leshill/vim-json', { 'autoload': { 'filetypes': ['json'] } }
  NeoBundleLazy 'lukerandall/haskellmode-vim', { 'autoload': { 'filetypes': ['hs'] } }
  NeoBundleLazy 'plasticboy/vim-markdown', { 'autoload': { 'filetypes': ['md', 'markdown', 'mdown', 'mkd'] } }
  NeoBundleLazy 'tpope/vim-haml', { 'autoload': { 'filetypes': ['sass', 'scss', 'haml'] } }
  NeoBundleLazy 'wavded/vim-stylus', { 'autoload': { 'filetypes': ['styl'] } }
  NeoBundleLazy 'AnsiEsc.vim', { 'autoload': { 'filetypes': ['color', 'ansi', 'esc'] } }
  NeoBundleLazy 'shawncplus/phpcomplete.vim', { 'autoload': { 'filetypes': ['php'] } }

  let g:ruby_path=$RUBY_BIN

  augroup filetypedetect
    au BufNewFile,BufRead *.conf set filetype=apache
    au BufNewFile,BufRead *.{csv,dat,dsv} set filetype=csv
    au BufNewFile,BufRead *.coffee set filetype=coffee
    au BufNewFile,BufRead *.hs compiler ghc
    au BufNewFile,BufRead Gemfile, Rakefile, Vagrantfile, Thorfile set filetype=ruby
    au BufNewFile,BufRead Procfile, Guardfile, config.ru, *.rake set filetype=ruby
    au BufNewFile,BufRead *.jade set filetype=jade
    au BufNewFile,BufRead *.{md,markdown,mdown,mkd} set filetype=markdown
    au BufNewFile,BufRead *.styl set filetype=stylus
    au BufNewFile,BufRead *.json set filetype=javascript
    au BufNewFile,BufRead *.vim set filetype=vim
    au BufNewFile,BufRead *.{color,ansi,esc} set filetype=colored
  augroup END

  au FileType javascript setlocal dictionary+=$HOME/.vim/bundle/vim-node/dict/node.dict
  au FileType vim setlocal foldenable foldlevelstart=0 foldmethod=marker
  au FileType colored :AnsiEsc

  " Haskell
  let g:haddock_browser="open"
  let g:haddock_browser_callformat = "%s %s"

  " Html
  au FileType html set matchpairs+=<:>

" }}}


" Abbreviations -------------------------------------------------------- {{{

  " Git
  cabbrev gb Gblame
  cabbrev gc Gcommit
  cabbrev gd Gdiff
  cabbrev gl Gitv
  cabbrev gp Git push
  cabbrev gs Gstatus

" }}}


" Key-mappings --------------------------------------------------------- {{{

  " Change leader
  let g:mapleader = " "
  let g:maplocalleader = "\\"

  " Navigate by row instead of line
  nnoremap j gj
  nnoremap k gk

  " Expected behavior of yank
  nnoremap Y y$

  " Better focus on search matches
  nnoremap n nzzzv
  nnoremap N Nzzzv

  " Remove highlighted search-query with enter-key
  nnoremap <cr> :nohlsearch<cr>

  " Normalize regular-expression searches
  nnoremap / /\v
  vnoremap / /\v
  nnoremap ? ?\v
  vnoremap ? ?\v
  cnoremap s/ s/\v
  cnoremap s@ s@\v

    " Diff
  au BufEnter * if &diff | call s:DiffMappings()
  fun! s:DiffMappings()
    map <up> [c<cr>
    map <down> ]c<cr>
  endfun

  " Sudo like a boss
  cmap w!! w !sudo tee % >/dev/null
  cmap x!! x !sudo tee % >/dev/null

  " Prevent de-select when indenting blocks
  vnoremap < <gv
  vnoremap > >gv

  " Window manipulation
  map <c-h> :wincmd h<cr>
  map <c-j> :wincmd j<cr>
  map <c-k> :wincmd k<cr>
  map <c-l> :wincmd l<cr>
  map <c-w>+ :10winc ><cr>
  map <c-w>- :10winc <<cr>

  " Quick-open directory in a new buffer
  nmap <leader>e :e <c-r>=expand('%:h').'/'<cr><cr>
  nmap <leader>sp :sp <c-r>=expand('%:h').'/'<cr><cr>
  nmap <leader>vs :vs <c-r>=expand('%:h').'/'<cr><cr>
  nmap <leader>t :tabe <c-r>=expand('%:h').'/'<cr><cr>

  " Prevent the use of arrow-keys as screen-navigation
  map <up> <nop>
  map <down> <nop>
  map <left> <nop>
  map <right> <nop>
  inoremap <left>  <nop>
  inoremap <right> <nop>
  inoremap <up>    <nop>
  inoremap <down>  <nop>

  " Tab switching
  nnoremap <right> :tabnext<cr>
  nnoremap <left> :tabprevious<cr>

  " Unite mappings
  au FileType unite call s:UniteMappings()
  fun! s:UniteMappings()
    noremap <buffer><silent><expr> E unite#do_action('vsplit')
  endfun
  nnoremap <c-p>      :Unite -buffer-name=files file_rec/async:!<cr>
  nnoremap <c-y>      :Unite -buffer-name=history history/yank:!<cr>
  nnoremap <leader>o  :Unite -buffer-name=outline outline<cr>
  nnoremap <leader>/  :Unite -buffer-name=search -no-quit grep:.<cr>

  " Relative/absolute line-numbers
  if exists('NumberToggle')
    nnoremap <leader>n :call NumberToggle()<cr>
  endif

  " Speeddating - quick date/number manipulation
  let g:speeddating_no_mappings = 1
  nmap  +     <Plug>SpeedDatingUp
  nmap  -     <Plug>SpeedDatingDown
  xmap  +     <Plug>SpeedDatingUp
  xmap  -     <Plug>SpeedDatingDown
  nmap d+     <Plug>SpeedDatingNowUTC
  nmap d-     <Plug>SpeedDatingNowLocal

  " EasyMotion
  let g:EasyMotion_leader_key = '<leader>'

" }}}


" Load additional preferences ------------------------------------------ {{{
  let s:vimrc_local = expand('~/vimrc.local')
  if filereadable(s:vimrc_local)
    source s:vimrc_local
  endif

  autocmd VimEnter * NeoBundleCheck
" }}}


