
"
" A proper vim-runcom
" Author: Henrik Kjelsberg <hkjels@me.com>
" See:    http://vim.guru/
"
" Annoyances & anti-patterns
" ==========================
" * Documentation for languages should be browsable inside of `vim`
"

" Plug-ins ------------------------------------------------------------- {{{
  call plug#begin('~/.vim/plugged')

  set rtp+=/usr/local/Cellar/fzf/0.9.2

  " Settings
  Plug 'hkjels/natural.vim'

  " File
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-eunuch'

  " Library
  " Reminder: fire of `:BenchVimrc` if vim-startup is slow
  " Plug 'Shougo/unite.vim'
  " Plug 'Shougo/vimproc.vim'
  Plug 'mattn/benchvimrc-vim'
  Plug 'tpope/vim-classpath'

  " SCM
  Plug 'gregsexton/gitv'
  Plug 'jaxbot/github-issues.vim'
  Plug 'mhinz/vim-signify'
  Plug 'sjl/splice.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-git'

  " Environment
  Plug 'buztard/vim-nomad'
  Plug 'tpope/vim-tbone'

  " Navigation
  " Plug 'Shougo/unite-help'
  " Plug 'Shougo/unite-outline'
  Plug 'christoomey/vim-tmux-navigator'
  " Plug 'hewes/unite-gtags'
  Plug 'jeffkreeftmeijer/vim-numbertoggle'
  Plug 'kshenoy/vim-signature'
  Plug 'saihoooooooo/glowshi-ft.vim'
  " Plug 'thinca/vim-unite-history'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-vinegar'

  " Editing
  Plug 'sjl/gundo.vim', {'on': 'GundoToggle'}
  Plug 'junegunn/goyo.vim', {'on': 'Goyo'}
  Plug 'AndrewRadev/switch.vim'
  Plug 'PeterRincker/vim-argumentative'
  Plug 'Raimondi/delimitMate'
  Plug 'Shougo/context_filetype.vim'
  Plug 'kana/vim-textobj-user'
  Plug 'osyo-manga/vim-watchdogs'
  Plug 'scrooloose/syntastic'
  Plug 'tommcdo/vim-exchange'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fireplace'
  Plug 'tpope/vim-ragtag'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-surround'
  Plug 'tsaleh/vim-align'
  Plug 'Wolfy87/vim-expand'

  " File-type
  Plug 'tpope/vim-leiningen'
  Plug 'tpope/vim-markdown'
  Plug 'elzr/vim-json'
  Plug 'chrisbra/csv.vim'
  Plug 'guns/vim-clojure-static'
  Plug 'guns/vim-clojure-highlight'
  Plug 'AnsiEsc.vim'
  Plug 'othree/html5.vim'
  Plug 'vim-scripts/applescript.vim'

  " Completions
  Plug 'Shougo/neocomplete'
  Plug 'Shougo/neosnippet.vim'
  Plug 'vim-guru/vim-snippets'
  Plug 'marijnh/tern_for_vim'
  Plug 'guileen/vim-node'
  Plug 'osyo-manga/vim-marching'

  " Aesthetics
  Plug 'altercation/vim-colors-solarized'
  Plug 'bling/vim-airline'
  Plug 'edkolev/tmuxline.vim'
  Plug 'ivyl/vim-bling'
  Plug 'ap/vim-css-color'
  Plug 'Dinduks/vim-holylight'

  call plug#end()
" }}}

" Plug-in configurations ----------------------------------------------- {{{

  " Unite
  " let g:unite_source_history_yank_enable = 1
  " let g:unite_enable_start_insert = 1
  " let g:unite_source_file_rec_max_cache_files = 0
  " if executable('ag')
  "   let g:unite_source_grep_command = 'ag'
  " else
  "   let g:unite_source_grep_command = 'grep'
  " endif
  " let g:unite_source_grep_default_opts = '--nogroup --nocolor --column --smart-case'
  " let g:unite_source_grep_recursive_opt = ''
  " let s:unite_affects = 'file,file/new,buffer,file_rec,file_rec/async'
  " let s:unite_ignore = join(['\.git/', '\.hg/', '\.svn/', '\.DS_Store/', 'components/', 'node_modules/'], '\|')
  " call unite#filters#matcher_default#use(['matcher_fuzzy'])
  " call unite#custom#source(s:unite_affects, 'max_candidates', 0)
  " call unite#custom#source(s:unite_affects, 'ignore_pattern', s:unite_ignore)
  " autocmd FileType unite call s:unite_settings()
  " function! s:unite_settings()
  "   imap <buffer> <f5> <Plug>(unite_redraw)
  "   nnoremap <buffer> <f5> <Plug>(unite_redraw)
  "   nnoremap <buffer><expr> s unite#do_action('split')
  "   nnoremap <buffer><expr> v unite#do_action('vsplit')
  " endfunction

  " Netrw
  " let g:netrw_list_hide= s:unite_ignore
  autocmd FileType netrw nmap <buffer> <backspace> -

  " Completion
  let g:neocomplete#enable_at_startup=1
  let g:neocomplete#enable_smart_case=1
  let g:neocomplete#sources#omni#functions=get(g:, 'neocomplete#sources#omni#functions', {})
  let g:neocomplete#sources#omni#functions.javascript='tern#Complete'
  let g:marching_clang_command="/usr/bin/clang"
  let g:marching_enable_neocomplete=1
  let g:marching_clang_command_option="-std=c++1y"
  let g:neosnippet#enable_snipmate_compatibility=1
  let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'

  " Markdown
  let g:markdown_fenced_languages = ['css', 'javascript', 'js=javascript', 'json=javascript', 'ruby']

  " Status-line
  if !exists('g:tmuxline_preset')
    let g:tmuxline_preset = 'full'
  endif
  if !exists('g:airline_powerline_fonts')
    let g:airline_powerline_fonts = 1
  endif
" }}}

" Override defaults ---------------------------------------------------- {{{
  syntax enable                       " Enable syntax-highlighting
  set tabstop=2                       " Number of spaces a tab counts for
  set shiftwidth=2                    " Width to shift on indent operations
  set expandtab                       " Use space instead of tabs in insert-mode
  set smarttab                        " Insert blanks according to shiftwidth in start of lines
  set tags+=.git/tags;.tags           " Store tags with each project
  set foldmethod=indent               " Fold by indentation-level
  set foldnestmax=3                   " Number of nested folds
  set nofoldenable                    " DonÂ´t fold when opening files
  set keywordprg=:help                " Command to execute with `K`
  set synmaxcol=200                   " Highlight only column 1-[200]
  set pastetoggle=<F9>                " Toggle paste-mode
  set mouse=a                         " Enable mouse
  set mousehide                       " Hide pointer when typing
  set laststatus=2                    " Always display the status-line
  set clipboard=unnamed               " Yank and paste with the system clipboard
  colorscheme solarized               " Active color-scheme
  " highlight SignColumn ctermbg=0      " Solarized bugfix
" }}}

" Key bindings --------------------------------------------------------- {{{
  let g:mapleader=' '                 " Sets <leader> to <space>
  let g:maplocalleader='\\'           " <localleader> to \

  " Quick-open directory in a new buffer
  nmap <leader>e :Explore<cr>
  nmap <leader>sp :Sexplore<cr>
  nmap <leader>vs :Vexplore<cr>
  nmap <leader>t :tabe <c-r>=expand('%:h').'/'<cr><cr>

  " Switch definition
  nnoremap - :Switch<cr>

  " Quick-paste
  map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

  " Toggle virtualedit-mode, so you can surpass line-endings or not
  nmap <leader>v :let &ve=&ve=="" ? "all" : "block" <bar> set ve?<cr>

  " Smalls
  nmap s <Plug>(smalls)
  omap s <Plug>(smalls)
  xmap s <Plug>(smalls)

  " Prevent the use of arrow-keys as screen-navigation
  map <up>    <nop>
  map <down>  <nop>
  map <left>  <nop>
  map <right> <nop>
  inoremap <left>  <nop>
  inoremap <right> <nop>
  inoremap <up>    <nop>
  inoremap <down>  <nop>

  " Tab switching
  nnoremap <left> :tabprevious<cr>
  nnoremap <right> :tabnext<cr>

  " Neosnippets
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

  " Invert brightness of color-scheme
  command! -bar InvertColorScheme :let &background = (&background=="light"?"dark":"light")
  map <leader>c :InvertColorScheme<cr>

  " Search/replace word below cursor
  nnoremap <expr> s* ':%substitute/\<' . expand('<cword>') . '\>/'

  " Relative/absolute line-numbers
  nnoremap <leader>n :call NumberToggle()<cr>

  " Tags
  map tt <c-]>
  map TT <c-[>

  " Unite
  " nnoremap <leader>T    :<C-u>Unite -buffer-name=references gtags/context:!<cr>
  " nnoremap <leader>o    :<C-u>Unite -buffer-name=files file_rec/async:!<cr>
  " nnoremap <leader>y    :<C-u>Unite -buffer-name=yankring history/yank:!<cr>
  " nnoremap <leader>b    :<C-u>Unite -buffer-name=buffers buffer:!<cr>
  " nnoremap <leader>m    :<C-u>Unite -no-split -start-insert -auto-preview -buffer-name=outline outline<cr>
  " nnoremap <leader>/    :<C-u>Unite -buffer-name=search -no-quit grep:.<cr>
  " nnoremap <leader>h    :<C-u>Unite -buffer-name=history history/command:!<cr>
  " nnoremap <leader>H    :<C-u>Unite -buffer-name=help help<cr>
  " nnoremap <Leader>ub   :<C-u>Unite -buffer-name=bookmarks bookmark<cr>

  command! -nargs=1 AgFZF call fzf#run({
    \'source': Arghandler(<f-args>),
    \'sink' : function('AgHandler'),
    \'options' : '-m'
    \})

  function! AgHandler(l)
    let keys = split(a:l,':')
    execute 'tabe +' . keys[-2] . ' ' . escape(keys[-1], ' ')
  endfunction 

  function! Arghandler(l)
    return "ag -i " . a:l . " | sed 's@\\(.[^:]*\\):\\(.[^:]*\\):\\(.*\\)@\\3:\\2:\\1@' "
  endfunction

  nnoremap <leader>o     :<c-u>FZF<cr>

  command! FZFMru call fzf#run({
    \'source': v:oldfiles,
    \'sink' : 'e ',
    \'options' : '-m',
    \})


  command! FZFLines call fzf#run({
    \ 'source':  BuffersLines(),
    \ 'sink':    function('LineHandler'),
    \ 'options': '--extended --nth=3..,',
    \ 'tmux_height': '60%'
    \})

  function! LineHandler(l)
    let keys = split(a:l, ':\t')
    exec 'buf ' . keys[0]
    exec keys[1]
    normal! ^zz
  endfunction

  function! BuffersLines()
    let res = []
    for b in filter(range(1, bufnr('$')), 'buflisted(v:val)')
      call extend(res, map(getbufline(b,0,"$"), 'b . ":\t" . (v:key + 1) . ":\t" . v:val '))
    endfor
    return res
  endfunction

  " Goyo
  nnoremap <leader>K :Goyo<cr>

  " Gundo
  nnoremap <leader>g :<C-u>GundoToggle<cr>

  " Move between changes in diff-mode using arrow-keys
  au BufEnter * if &diff | call s:DiffMappings()
  fun! s:DiffMappings()
    map <up> [c<cr>
    map <down> ]c<cr>
  endfun

  " Help
  autocmd FileType help nmap <buffer> <Return> <C-]>
" }}}

" Auto-commands -------------------------------------------------------- {{{
  autocmd FocusLost * silent! wall
  autocmd! BufNewFile,BufRead *.myth setfiletype css
  autocmd! BufNewFile,BufRead *.applescript setfiletype applescript
" }}}

" Abbreviations -------------------------------------------------------- {{{
  " Git
  cabbrev gb Gblame
  cabbrev gc Gcommit
  cabbrev gd Gdiff
  cabbrev gl Gitv
  cabbrev gp Git push
  cabbrev gs Gstatus
" }}}

" Additional local preferences
" ---------------------------------------------------------------------- {{{
  let s:additionalPreferences = expand('~/.vimrc.local')
  if filereadable(s:additionalPreferences)
    exec "source " . s:additionalPreferences
  endif
" }}}

